AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Base network & shared AWS resources for the Geospatial Data Analysis project.
  Provides VPC, Subnets, NAT, ECS Cluster, ALB, Postgres, Redis & S3 bucket.

Parameters:
  ProjectName:
    Type: String
    Default: geo
    Description: Project prefix for tag / resource names.
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, prod]
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.8.0/21
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.16.0/21

Resources:
  # --- Networking -----------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-vpc"
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-public-a"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-public-b"
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-private-a"
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-private-b"

  # Route tables -------------------------------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetARouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetARouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # Security groups ----------------------------------------------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          FromPort: -1
          ToPort: -1

  # ECS & ALB ----------------------------------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ProjectName}-${Environment}-cluster"
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-alb"
      Scheme: internet-facing
      SecurityGroups: [!Ref ALBSecurityGroup]
      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: text/plain
            MessageBody: "Not Found"

  # Data stores --------------------------------------------------------------
  S3RawBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-raw-${AWS::AccountId}"
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis subnets
      SubnetIds: [!Ref PrivateSubnetA, !Ref PrivateSubnetB]
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t4g.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds: [!Ref ECSTaskSecurityGroup]
      CacheSubnetGroupName: !Ref RedisSubnetGroup
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private subnets for Postgres
      SubnetIds: [!Ref PrivateSubnetA, !Ref PrivateSubnetB]
  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t4g.medium
      Engine: postgres
      EngineVersion: "16.1"
      AllocatedStorage: 20
      MasterUsername: postgres # TODO: In prod use Secrets Manager!
      MasterUserPassword: postgres
      PubliclyAccessible: false
      VPCSecurityGroups: [!Ref ECSTaskSecurityGroup]
      DBSubnetGroupName: !Ref DBSubnetGroup

Outputs:
  VpcId:
    Description: VPC Id
    Value: !Ref VPC
    Export:
      Name: !Sub "${ProjectName}-${Environment}-VpcId"
  PublicSubnetIds:
    Description: Comma delimited public subnets
    Value: !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB]]
    Export:
      Name: !Sub "${ProjectName}-${Environment}-PublicSubnetIds"
  PrivateSubnetIds:
    Description: Comma delimited private subnets
    Value: !Join [",", [!Ref PrivateSubnetA, !Ref PrivateSubnetB]]
    Export:
      Name: !Sub "${ProjectName}-${Environment}-PrivateSubnetIds"
  ClusterName:
    Description: ECS Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ClusterName"
  ALBArn:
    Description: ARN of ALB listener (HTTP :80)
    Value: !Ref ALBListener
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ALBListenerArn"
  ALBSecurityGroup:
    Description: SG id for ALB
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ALBSG"
  ECSSecurityGroup:
    Description: SG id for ECS tasks
    Value: !Ref ECSTaskSecurityGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ECSSG"
  S3RawBucket:
    Value: !Ref S3RawBucket
    Export:
      Name: !Sub "${ProjectName}-${Environment}-S3RawBucket"
  PostgresEndpoint:
    Value: !GetAtt PostgresDB.Endpoint.Address
    Export:
      Name: !Sub "${ProjectName}-${Environment}-PostgresEndpoint"
  RedisEndpoint:
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub "${ProjectName}-${Environment}-RedisEndpoint"
