version: "3.8"

services:
  # For local deployment -------------------------------------------------------
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 20s
      retries: 10

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 minioadmin minioadmin &&
      mc mb --ignore-existing local/geo-raw-data"

  postgres:
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gis
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Services -------------------------------------------------------------------
  scraper:
    build:
      context: ../
      dockerfile: services/scraper/Dockerfile
    profiles: ["etl"]
    depends_on: [minio-init]
    environment:
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: geo-raw-data

  etl:
    build:
      context: ../
      dockerfile: services/etl/Dockerfile
    profiles: ["etl"]
    depends_on:
      minio-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      # ---- Postgres connection ----
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME: gis

      # ---- S3 / MinIO --------------
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1 # boto3 still wants a region
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: geo-raw-data
      S3_PREFIX: test

  api:
    build:
      context: ../
      dockerfile: services/api/Dockerfile
    env_file: ../services/api/.env.local
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"

  frontend:
    build: ../services/frontend
    env_file: ../services/frontend/.env.local
    depends_on: [api]
    ports:
      - "5174:5174"

volumes:
  minio_data:
  pg_data:
  redis_data:
